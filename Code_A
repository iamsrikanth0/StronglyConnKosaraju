import java.util.*;
    public class CreateGraph{
    static class Edge{
        int src;
        int dst;
      public  Edge(int s, int d){
            this.src = s;
            this.dst = d;
        }
    }
    public static void creatingAGraphs( ArrayList<Edge> graph[]){
    //Creating empty arraylist fron Null arraylist
    for(int i=0; i<graph.length; i++){
        graph[i]= new ArrayList<Edge>();
    }
    graph[0].add(new Edge(0, 2));
        graph[1].add(new Edge(1, 2));

        graph[2].add(new Edge(2, 0));
        graph[2].add(new Edge(2, 1));
        graph[2].add(new Edge(2, 3));

        graph[3].add(new Edge(3, 1));
        graph[3].add(new Edge(3, 2));

}

public static void topSort(ArrayList<Edge> graph[],int curr, boolean vis[], Stack<Integer> s){
    vis[curr]= true;
    for(int i=0; i<graph[curr].size();i++){
        Edge e= graph[curr].get(i);

        if(!vis[e.dst]){
            topSort(graph, e.dst, vis, stack);
        }
}
stack.push(curr);
}

public static void depthFirstSearch(ArrayList<Edge> graph[], boolean vis[], int SP){

    int curr = SP;
    vis[curr]= true;

    System.out.print(curr+" ");
    if(vis[curr]==false){//base case
        System.out.print(curr+" ");
    vis[curr]= true; // step that is helping the function move towards base case 
    for(int i=0; i<graph[curr].size(); i++){ // Recurring step
        Edge e = graph[curr].get(i);
        depthFirstSearch(graph, vis, e.dst);// step that is helping the function move towards base case 
    }
    }
}


public static void kosarajuAlgo(ArrayList<Edge> graph[], int V){
    //Step 1
    Stack<Integer> s= new Stack<>();
    boolean vis[] = new boolean[V];
    for (int i=0; i<V; i++){
        if(!vis[i[]]){
            topSort(graph, i, vis, s);
        }
    }
    //Step 2 - transpose graph
    ArrayList<Edge> transpose[] = new ArrayList[V];
    for(int i=0; i<graph.length; i++){
        vis[i]= false // malli use cheskovachu ani
        transpose[i]= new ArrayList<Edge>();
    }
    //Now take all neighbours of the graph, how?
    for(int i=0;i<V; i++){
        for(int j=0, j<graph[i].size();j++){
            Edge e = graph[i].get[j]; //e.src -->> e.dst, we have to reverse it now
            transpose[e.dst].add(new Edge(e.dst, e.src)); //ikkada src dst avthundi, anduke tranpose[e.dst]ani rasam
        }
    }
    //Step 3 Perform dfs based on stack values
    while(!s.isEmpty()){
        int curr = s.pop();
        if (!vis[curr]){
            depthFirstSearch(graph, curr, vis);
        }
        System.out.println();
    }
}
public static void main(String args[]){
    int V = 4;
    ArrayList<Edge> graph[] = new ArrayList[V];
    creatingAGraphs(graph);
    kosarajuAlg(graph, v);

            //printing 2's neighbours
    for(int i=0; i< graph[2].size(); i++){
        Edge e = graph[2].get(i);
        System.out.println(e.dst+ " " );
    }
}
}

